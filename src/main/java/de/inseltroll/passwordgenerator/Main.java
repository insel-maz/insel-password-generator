package de.inseltroll.passwordgenerator;

import java.awt.Toolkit;
import java.awt.datatransfer.StringSelection;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author maz
 */
public class Main extends javax.swing.JFrame {

	private final Generator generator = new Generator();

	/**
	 * Creates new form Main
	 */
	public Main() {
		initComponents();
		updatePassword();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        generateNewSeedButton = new javax.swing.JButton();
        passwordTextField = new javax.swing.JTextField();
        copyAndCloseButton = new javax.swing.JButton();
        passwordLengthLabel = new javax.swing.JLabel();
        passwordLengthDisplayLabel = new javax.swing.JLabel();
        passwordLengthSlider = new javax.swing.JSlider();
        alphaFirstCheckBox = new javax.swing.JCheckBox();
        omitHomoglyphsCheckBox = new javax.swing.JCheckBox();
        pickFromCharsPanel = new javax.swing.JPanel();
        upperAlphaCheckBox = new javax.swing.JCheckBox();
        lowerAlphaCheckBox = new javax.swing.JCheckBox();
        numericCheckBox = new javax.swing.JCheckBox();
        specialCheckBox = new javax.swing.JCheckBox();
        printableAsciiCheckBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Insel Password Generator");

        generateNewSeedButton.setText("Generate new seed");
        generateNewSeedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateNewSeedButtonActionPerformed(evt);
            }
        });

        passwordTextField.setFont(new java.awt.Font("Courier New", 1, 14)); // NOI18N
        passwordTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        passwordTextField.setText("PASSWORD");
        passwordTextField.setMinimumSize(new java.awt.Dimension(200, 30));

        copyAndCloseButton.setText("Copy and close");
        copyAndCloseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyAndCloseButtonActionPerformed(evt);
            }
        });

        passwordLengthLabel.setText("Password length:");

        passwordLengthDisplayLabel.setText("12");

        passwordLengthSlider.setMaximum(32);
        passwordLengthSlider.setMinimum(4);
        passwordLengthSlider.setValue(12);
        passwordLengthSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                passwordLengthSliderStateChanged(evt);
            }
        });

        alphaFirstCheckBox.setText("Alphabetic character first");
        alphaFirstCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionActionPerformed(evt);
            }
        });

        omitHomoglyphsCheckBox.setText("Omit homoglyphs");
        omitHomoglyphsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionActionPerformed(evt);
            }
        });

        pickFromCharsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Pick from characters"));

        upperAlphaCheckBox.setText("A-Z");
        upperAlphaCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionActionPerformed(evt);
            }
        });

        lowerAlphaCheckBox.setSelected(true);
        lowerAlphaCheckBox.setText("a-z");
        lowerAlphaCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionActionPerformed(evt);
            }
        });

        numericCheckBox.setSelected(true);
        numericCheckBox.setText("0-9");
        numericCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionActionPerformed(evt);
            }
        });

        specialCheckBox.setSelected(true);
        specialCheckBox.setText("Special");
        specialCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionActionPerformed(evt);
            }
        });

        printableAsciiCheckBox.setText("Printable Ascii");
        printableAsciiCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pickFromCharsPanelLayout = new javax.swing.GroupLayout(pickFromCharsPanel);
        pickFromCharsPanel.setLayout(pickFromCharsPanelLayout);
        pickFromCharsPanelLayout.setHorizontalGroup(
            pickFromCharsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pickFromCharsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pickFromCharsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pickFromCharsPanelLayout.createSequentialGroup()
                        .addGroup(pickFromCharsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pickFromCharsPanelLayout.createSequentialGroup()
                                .addComponent(upperAlphaCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lowerAlphaCheckBox))
                            .addGroup(pickFromCharsPanelLayout.createSequentialGroup()
                                .addComponent(numericCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(specialCheckBox)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(printableAsciiCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pickFromCharsPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {lowerAlphaCheckBox, numericCheckBox, specialCheckBox, upperAlphaCheckBox});

        pickFromCharsPanelLayout.setVerticalGroup(
            pickFromCharsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pickFromCharsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pickFromCharsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(upperAlphaCheckBox)
                    .addComponent(lowerAlphaCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pickFromCharsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numericCheckBox)
                    .addComponent(specialCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(printableAsciiCheckBox)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(generateNewSeedButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(passwordTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(copyAndCloseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(omitHomoglyphsCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(passwordLengthSlider, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(alphaFirstCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(passwordLengthLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(passwordLengthDisplayLabel)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)
                        .addComponent(pickFromCharsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(generateNewSeedButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passwordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(copyAndCloseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(passwordLengthLabel)
                            .addComponent(passwordLengthDisplayLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(passwordLengthSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(alphaFirstCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(omitHomoglyphsCheckBox))
                    .addComponent(pickFromCharsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void passwordLengthSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_passwordLengthSliderStateChanged
		passwordLengthDisplayLabel.setText(Integer.toString(passwordLengthSlider.getValue()));
		updatePassword();
	}//GEN-LAST:event_passwordLengthSliderStateChanged

	private void generateNewSeedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateNewSeedButtonActionPerformed
		generator.applyNewSeed();
		updatePassword();
	}//GEN-LAST:event_generateNewSeedButtonActionPerformed

	private void copyAndCloseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyAndCloseButtonActionPerformed
		Toolkit.getDefaultToolkit().getSystemClipboard().setContents(
				new StringSelection(passwordTextField.getText()), null);
		this.dispose();
	}//GEN-LAST:event_copyAndCloseButtonActionPerformed

	private void optionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optionActionPerformed
		Object source = evt.getSource();
		if (source == printableAsciiCheckBox) {
			boolean enabled = !printableAsciiCheckBox.isSelected();
			upperAlphaCheckBox.setEnabled(enabled);
			lowerAlphaCheckBox.setEnabled(enabled);
			numericCheckBox.setEnabled(enabled);
			specialCheckBox.setEnabled(enabled);
		}

		if (source == upperAlphaCheckBox || source == lowerAlphaCheckBox || source == printableAsciiCheckBox) {
			boolean enabled = upperAlphaCheckBox.isSelected() || lowerAlphaCheckBox.isSelected() || printableAsciiCheckBox.isSelected();
			alphaFirstCheckBox.setEnabled(enabled);
		}

		updatePassword();
	}//GEN-LAST:event_optionActionPerformed

	private void updatePassword() {
		generator.length = passwordLengthSlider.getValue();
		generator.useAlphaFirst = alphaFirstCheckBox.isEnabled() && alphaFirstCheckBox.isSelected();
		generator.omitHomoglyphs = omitHomoglyphsCheckBox.isEnabled() && omitHomoglyphsCheckBox.isSelected();
		generator.useUpperAlpha = upperAlphaCheckBox.isEnabled() && upperAlphaCheckBox.isSelected();
		generator.useLowerAlpha = lowerAlphaCheckBox.isEnabled() && lowerAlphaCheckBox.isSelected();
		generator.useNumeric = numericCheckBox.isEnabled() && numericCheckBox.isSelected();
		generator.useSpecial = specialCheckBox.isEnabled() && specialCheckBox.isSelected();
		generator.usePrintableAscii = printableAsciiCheckBox.isEnabled() && printableAsciiCheckBox.isSelected();

		passwordTextField.setText(generator.generate());
	}

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {

		try {
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		} catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
			Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
			return;
		}

		/*
		 * Create and display the form
		 */
		java.awt.EventQueue.invokeLater(new Runnable() {

			@Override
			public void run() {
				new Main().setVisible(true);
			}
		});
	}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox alphaFirstCheckBox;
    private javax.swing.JButton copyAndCloseButton;
    private javax.swing.JButton generateNewSeedButton;
    private javax.swing.JCheckBox lowerAlphaCheckBox;
    private javax.swing.JCheckBox numericCheckBox;
    private javax.swing.JCheckBox omitHomoglyphsCheckBox;
    private javax.swing.JLabel passwordLengthDisplayLabel;
    private javax.swing.JLabel passwordLengthLabel;
    private javax.swing.JSlider passwordLengthSlider;
    private javax.swing.JTextField passwordTextField;
    private javax.swing.JPanel pickFromCharsPanel;
    private javax.swing.JCheckBox printableAsciiCheckBox;
    private javax.swing.JCheckBox specialCheckBox;
    private javax.swing.JCheckBox upperAlphaCheckBox;
    // End of variables declaration//GEN-END:variables
}
